{
  "recentFiles": [
    {
      "basename": "Theory",
      "path": "React Native/Data/Theory.md"
    },
    {
      "basename": "Dashboard",
      "path": "React Native/Dashboard.md"
    },
    {
      "basename": "slides (1)",
      "path": "React Native/Files/slides (1).pdf"
    },
    {
      "basename": "Conflic-Obsidian",
      "path": "Conflic-Obsidian.md"
    },
    {
      "basename": "Short-cuts",
      "path": "Short-cuts.md"
    },
    {
      "basename": "Dashboard",
      "path": "Obsidian Tutorial/Dashboard.md"
    },
    {
      "basename": "card.excalidraw",
      "path": "Drawing/Data/card.excalidraw.md"
    },
    {
      "basename": "Dashboard",
      "path": "React/Dashboard.md"
    },
    {
      "basename": "Summary",
      "path": "Git and GitHub/Git/Summary.md"
    },
    {
      "basename": "Dashboard",
      "path": "Git and GitHub/Dashboard.md"
    },
    {
      "basename": "Udemy-course",
      "path": "Markdown/Udemy-course.md"
    },
    {
      "basename": "Obsidian",
      "path": "Markdown/Obsidian.md"
    },
    {
      "basename": "Cheatsheet",
      "path": "Markdown/Cheatsheet.pdf"
    },
    {
      "basename": "tests",
      "path": "React/Data/Theory/tests.md"
    },
    {
      "basename": "style",
      "path": "React/Data/Theory/style.md"
    },
    {
      "basename": "pass-data-bottom-up",
      "path": "React/Data/Theory/pass-data-bottom-up.md"
    },
    {
      "basename": "lazy-loading",
      "path": "React/Data/Theory/lazy-loading.md"
    },
    {
      "basename": "http-request",
      "path": "React/Data/Theory/http-request.md"
    },
    {
      "basename": "fragments-and-portal",
      "path": "React/Data/Theory/fragments-and-portal.md"
    },
    {
      "basename": "forms",
      "path": "React/Data/Theory/forms.md"
    },
    {
      "basename": "events",
      "path": "React/Data/Theory/events.md"
    },
    {
      "basename": "entry-point",
      "path": "React/Data/Theory/entry-point.md"
    },
    {
      "basename": "create-react-app",
      "path": "React/Data/Theory/create-react-app.md"
    },
    {
      "basename": "coding-knowledge",
      "path": "React/Data/Theory/coding-knowledge.md"
    },
    {
      "basename": "class-component",
      "path": "React/Data/Theory/class-component.md"
    },
    {
      "basename": "useState()",
      "path": "React/Data/Hooks/useState().md"
    },
    {
      "basename": "useRef()",
      "path": "React/Data/Hooks/useRef().md"
    },
    {
      "basename": "useReducer()",
      "path": "React/Data/Hooks/useReducer().md"
    },
    {
      "basename": "useEffect()",
      "path": "React/Data/Hooks/useEffect().md"
    },
    {
      "basename": "rule-of-hooks",
      "path": "React/Data/Hooks/rule-of-hooks.md"
    },
    {
      "basename": "custom-hook",
      "path": "React/Data/Hooks/custom-hook.md"
    },
    {
      "basename": "createContext()&useContext()",
      "path": "React/Data/Hooks/createContext()&useContext().md"
    },
    {
      "basename": "get-started",
      "path": "React/Libs/React Router/data/get-started.md"
    },
    {
      "basename": "get-started",
      "path": "React/Libs/Next.js/data/get-started.md"
    },
    {
      "basename": "index",
      "path": "React/Libs/Next.js/index.md"
    },
    {
      "basename": "Next_1",
      "path": "React/Libs/Next.js/files/Next_1.pdf"
    },
    {
      "basename": "align-self",
      "path": "Style/CSS/Files/align-self.png"
    },
    {
      "basename": "DashBoard",
      "path": "Style/DashBoard.md"
    },
    {
      "basename": "Prompt",
      "path": "Ionic/Data/Prompt.md"
    },
    {
      "basename": "Debugging",
      "path": "Ionic/Data/Debugging.md"
    },
    {
      "basename": "Developing",
      "path": "Ionic/Data/Developing.md"
    },
    {
      "basename": "Lifecycle Methods",
      "path": "Ionic/Data/Lifecycle Methods.md"
    },
    {
      "basename": "react-test",
      "path": "React/Files/react-test.pdf"
    },
    {
      "basename": "Building a type-safe fetch in typescript",
      "path": "JS and TS/TypeScript/Data/Building a type-safe fetch in typescript.md"
    },
    {
      "basename": "Dashboard",
      "path": "Excel/Dashboard.md"
    },
    {
      "basename": "non-null-assertion-operator",
      "path": "JS and TS/TypeScript/theory/non-null-assertion-operator.md"
    },
    {
      "basename": "generics",
      "path": "JS and TS/TypeScript/theory/generics.md"
    },
    {
      "basename": "as-const",
      "path": "JS and TS/TypeScript/theory/as-const.md"
    },
    {
      "basename": "Stuff",
      "path": "Stuff.md"
    },
    {
      "basename": "router-class",
      "path": "Angular/observable/router-class.md"
    }
  ],
  "omittedPaths": [],
  "maxLength": null,
  "openType": "tab"
}