/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SelectOnFirePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// modal.ts
var import_obsidian = require("obsidian");
var InsertSelectModal = class extends import_obsidian.Modal {
  constructor(app, defaultNumber, onSubmit) {
    super(app);
    this.optionNumber = defaultNumber;
    this.emptyOption = true;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", {
      text: "How many select options do you need ?"
    });
    new import_obsidian.Setting(contentEl).setName("Number of options (max: 25)").addText(
      (text) => text.setValue(`${this.optionNumber}`).onChange((value) => {
        this.optionNumber = Number(value);
        if (isNaN(this.optionNumber) || this.optionNumber <= 1 || this.optionNumber > 25) {
          button.setDisabled(true);
        } else {
          button.setDisabled(false);
        }
      })
    );
    new import_obsidian.Setting(contentEl).setName("Add an empty option").addToggle((cb) => {
      cb.setValue(true).setTooltip(
        "Enabling this will add an empty option at the top of the select list."
      ).onChange((value) => {
        this.emptyOption = value;
      });
    });
    const button = new import_obsidian.Setting(contentEl).addButton(
      (btn) => btn.setButtonText("Add Select").setCta().onClick(() => {
        this.close();
        this.onSubmit(this.optionNumber, this.emptyOption);
      })
    );
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// main.ts
var SelectOnFirePlugin = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.commandName = "Insert HTML select";
    this.setupWindowHandlers = (_workspaceWindow, win) => {
      this.registerDomEvent(
        win,
        "change",
        async (evt) => {
          const changeEl = evt.target;
          if (!(changeEl == null ? void 0 : changeEl.id) && !(changeEl instanceof HTMLSelectElement)) {
            return;
          }
          const selectedOption = changeEl.options[changeEl.selectedIndex].value;
          const selectId = changeEl.id;
          const view = this.app.workspace.activeEditor;
          if (!view || !view.editor || !view.file) {
            return;
          }
          const options = changeEl.options;
          const newOptions = Array.from(options).map(({ value, text }) => {
            const selectedAttr = value === selectedOption ? 'selected="selected"' : "";
            return `<option value="${value}" ${selectedAttr}>${text}</option>`;
          }).join("");
          const newSelect = `<select id="${selectId}">${newOptions}</select>`;
          let page = await this.app.vault.read(view.file);
          page = page.replace(
            new RegExp(`<select id="${selectId}">[\\s\\S]*?</select>`),
            `${newSelect}`
          );
          this.app.vault.modify(view.file, page);
        }
      );
    };
  }
  async onload() {
    this.app.workspace.on("window-open", this.setupWindowHandlers);
    this.setupWindowHandlers(void 0, activeWindow);
    const onSubmit = (optionNumber, emptyOption) => {
      this.createSelect(optionNumber, emptyOption);
    };
    this.addRibbonIcon("flame", this.commandName, () => {
      new InsertSelectModal(this.app, 5, onSubmit).open();
    });
    this.addCommand({
      id: "insert-html-select",
      name: this.commandName,
      editorCallback: () => {
        new InsertSelectModal(this.app, 5, onSubmit).open();
      }
    });
  }
  async onunload() {
    this.app.workspace.off("window-open", this.setupWindowHandlers);
  }
  generateUniqueId(page) {
    let id = crypto.randomUUID().slice(-6);
    while (this.idExistsInFile(id, page)) {
      id = crypto.randomUUID();
    }
    return id;
  }
  idExistsInFile(id, page) {
    const idIndex = page.search(id);
    return idIndex !== -1;
  }
  createSelect(optionNumber, emptyOption) {
    const view = this.app.workspace.activeEditor;
    if (!(view == null ? void 0 : view.editor)) {
      return;
    }
    const randomId = this.generateUniqueId(view.editor.getDoc().getValue());
    const emptyOptionString = emptyOption ? `<option value="0"></option>` : "";
    const select = `<select id="${randomId}">${emptyOptionString}${Array.from(
      { length: optionNumber },
      (_, i) => `<option value="${i + 1}">option ${i + 1}</option>`
    ).join("")}</select>`;
    view.editor.replaceSelection(select);
  }
};
